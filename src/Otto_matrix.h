// OttoDIY Arduino Library project 2024

// MaxMatrix - Copyright 2013 Oscar Kin-Chung Au

#ifndef Otto_matrix_h
#define Otto_matrix_h

#include "Arduino.h"

typedef struct {
    uint8_t Character[1];
    uint8_t data[6];
} LED_Matrix_Font_6x8_TypeDef;

// Terminal Font
const LED_Matrix_Font_6x8_TypeDef Character_font_6x8[] PROGMEM = {
    {'0', 0x00, 0x7C, 0x82, 0x82, 0x7C, 0x00},	// 0
    {'1', 0x00, 0x42, 0xFE, 0x02, 0x00, 0x00},	// 1
    {'2', 0x00, 0x46, 0x8A, 0x92, 0x62, 0x00},	// 2
    {'3', 0x00, 0x44, 0x92, 0x92, 0x6C, 0x00},	// 3
    {'4', 0x00, 0x1C, 0x64, 0xFE, 0x04, 0x00},	// 4
    {'5', 0x00, 0xF2, 0x92, 0x92, 0x8C, 0x00},	// 5
    {'6', 0x00, 0x7C, 0x92, 0x92, 0x4C, 0x00},	// 6
    {'7', 0x00, 0xC0, 0x8E, 0x90, 0xE0, 0x00},	// 7
    {'8', 0x00, 0x6C, 0x92, 0x92, 0x6C, 0x00},	// 8
    {'9', 0x00, 0x64, 0x92, 0x92, 0x7C, 0x00},	// 9
    {':', 0x00, 0x00, 0x14, 0x00, 0x00, 0x00},	// 10
    {';', 0x00, 0x02, 0x24, 0x00, 0x00, 0x00},	// 11
    {'<', 0x00, 0x10, 0x28, 0x44, 0x82, 0x00},	// 12
    {'=', 0x00, 0x28, 0x28, 0x28, 0x28, 0x00},	// 13
    {'>', 0x00, 0x82, 0x44, 0x28, 0x10, 0x00},	// 14
    {'?', 0x00, 0x20, 0x4a, 0x30, 0x00, 0x00},	// 15
    {'@', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// 16
    {'A', 0x00, 0x7E, 0x88, 0x88, 0x7E, 0x00},	// 17
    {'B', 0x00, 0xFE, 0x92, 0x92, 0x6C, 0x00},	// 18
    {'C', 0x00, 0x7C, 0x82, 0x82, 0x44, 0x00},	// 19
    {'D', 0x00, 0xFE, 0x82, 0x82, 0x7C, 0x00},	// 20
    {'E', 0x00, 0xFE, 0x92, 0x92, 0x82, 0x00},	// 21
    {'F', 0x00, 0xFE, 0x90, 0x90, 0x80, 0x00},	// 22
    {'G', 0x00, 0x7C, 0x82, 0x92, 0x5C, 0x00},	// 23
    {'H', 0x00, 0xFE, 0x10, 0x10, 0xFE, 0x00},	// 24
    {'I', 0x00, 0x82, 0xFE, 0x82, 0x00, 0x00},	// 25
    {'J', 0x00, 0x0C, 0x02, 0x02, 0xFC, 0x00},	// 26
    {'K', 0x00, 0xFE, 0x10, 0x28, 0xC6, 0x00},	// 27
    {'L', 0x00, 0xFE, 0x02, 0x02, 0x02, 0x00},	// 28
    {'M', 0x00, 0xFE, 0x40, 0x30, 0x40, 0xFE},	// 29
    {'N', 0x00, 0xFE, 0x40, 0x30, 0x08, 0xFE},	// 30
    {'O', 0x00, 0x7C, 0x82, 0x82, 0x82, 0x7C},	// 31
    {'P', 0x00, 0xFE, 0x90, 0x90, 0x60, 0x00},	// 32
    {'Q', 0x00, 0x7C, 0x82, 0x8A, 0x84, 0x7A},	// 33
    {'R', 0x00, 0xFE, 0x98, 0x94, 0x62, 0x00},	// 34
    {'S', 0x00, 0x64, 0x92, 0x92, 0x4C, 0x00},	// 35
    {'T', 0x00, 0x80, 0xFE, 0x80, 0x80, 0x00},	// 36
    {'U', 0x00, 0xFC, 0x02, 0x02, 0xFC, 0x00},	// 37
    {'V', 0x00, 0xF0, 0x0C, 0x02, 0x0C, 0xF0},	// 38
    {'W', 0x00, 0xFE, 0x04, 0x38, 0x04, 0xFE},	// 39
    {'X', 0x00, 0xC6, 0x38, 0x38, 0xC6, 0x00},	// 40
    {'Y', 0xC0, 0x20, 0x1E, 0x20, 0xC0, 0x00},	// 41
    {'Z', 0x00, 0x86, 0x9A, 0xB2, 0xC2, 0x00},	// 42
    {'!', 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00},	// 43
    {' ', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},	// 44
};

#if defined(ESP32)
# include <SPI.h>
#endif

#define max7219_reg_noop        0x00
#define max7219_reg_digit0      0x01
#define max7219_reg_digit1      0x02
#define max7219_reg_digit2      0x03
#define max7219_reg_digit3      0x04
#define max7219_reg_digit4      0x05
#define max7219_reg_digit5      0x06
#define max7219_reg_digit6      0x07
#define max7219_reg_digit7      0x08
#define max7219_reg_decodeMode  0x09
#define max7219_reg_intensity   0x0a
#define max7219_reg_scanLimit   0x0b
#define max7219_reg_shutdown    0x0c
#define max7219_reg_displayTest 0x0f

class Otto_Matrix
{
  private:
    byte data;
    byte load;
    byte clock;
    byte num;
    byte buffer[8];
    byte CHARbuffer[80];
    int  rotation;
    void reload();
    char rotation2;
    
  public:
    Otto_Matrix();
    bool initialized;
    void init(byte data, byte load, byte clock, byte num, int rotation);
    void clearMatrix();
    void setCommand(byte command, byte value);
    void setIntensity(byte intensity);
    void setColumn(byte col, byte value);
    void setColumnAll(byte col, byte value);
    void setDot(byte col, byte row, byte value);
    void writeFull(unsigned long value);
    void sendChar(const byte data, byte pos, byte number, byte scrollspeed);
};

#endif
